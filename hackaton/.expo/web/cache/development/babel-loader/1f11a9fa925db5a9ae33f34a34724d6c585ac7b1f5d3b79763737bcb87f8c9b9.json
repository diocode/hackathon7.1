{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar API_URL = 'http://your-api-endpoint.com/api';\nvar SQLite = Platform.OS !== 'web' ? require('react-native-sqlite-storage') : null;\nvar DatabaseService = function () {\n  function DatabaseService() {\n    _classCallCheck(this, DatabaseService);\n    if (Platform.OS !== 'web' && SQLite) {\n      this.db = SQLite.openDatabase({\n        name: 'streamflix.db',\n        location: 'default'\n      });\n      this.initDatabase();\n    }\n  }\n  return _createClass(DatabaseService, [{\n    key: \"initDatabase\",\n    value: function initDatabase() {\n      if (Platform.OS === 'web') return;\n      this.db.transaction(function (tx) {\n        tx.executeSql('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, email TEXT UNIQUE, password TEXT, preferences TEXT)', [], function () {\n          return console.log('Users table created');\n        }, function (_, error) {\n          return console.error('Error creating users table:', error);\n        });\n        tx.executeSql('CREATE TABLE IF NOT EXISTS watchlist (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, movie_id INTEGER, title TEXT, image TEXT, description TEXT, rating REAL, FOREIGN KEY (user_id) REFERENCES users (id))', [], function () {\n          return console.log('Watchlist table created');\n        }, function (_, error) {\n          return console.error('Error creating watchlist table:', error);\n        });\n        tx.executeSql('CREATE TABLE IF NOT EXISTS user_preferences (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, movie_id INTEGER, title TEXT, image TEXT, description TEXT, rating REAL, FOREIGN KEY (user_id) REFERENCES users (id))', [], function () {\n          return console.log('User preferences table created');\n        }, function (_, error) {\n          return console.error('Error creating user preferences table:', error);\n        });\n      });\n    }\n  }, {\n    key: \"createUser\",\n    value: function () {\n      var _createUser = _asyncToGenerator(function* (email, password) {\n        var _this = this;\n        if (Platform.OS === 'web') {\n          var response = yield fetch(`${API_URL}/users`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              email: email,\n              password: password\n            })\n          });\n          return response.json();\n        }\n        return new Promise(function (resolve, reject) {\n          _this.db.transaction(function (tx) {\n            tx.executeSql('INSERT INTO users (email, password) VALUES (?, ?)', [email, password], function (_, result) {\n              return resolve(result.insertId);\n            }, function (_, error) {\n              return reject(error);\n            });\n          });\n        });\n      });\n      function createUser(_x, _x2) {\n        return _createUser.apply(this, arguments);\n      }\n      return createUser;\n    }()\n  }, {\n    key: \"getUser\",\n    value: function () {\n      var _getUser = _asyncToGenerator(function* (email, password) {\n        var _this2 = this;\n        if (Platform.OS === 'web') {\n          var response = yield fetch(`${API_URL}/users/login`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              email: email,\n              password: password\n            })\n          });\n          return response.json();\n        }\n        return new Promise(function (resolve, reject) {\n          _this2.db.transaction(function (tx) {\n            tx.executeSql('SELECT * FROM users WHERE email = ? AND password = ?', [email, password], function (_, result) {\n              return resolve(result.rows.item(0));\n            }, function (_, error) {\n              return reject(error);\n            });\n          });\n        });\n      });\n      function getUser(_x3, _x4) {\n        return _getUser.apply(this, arguments);\n      }\n      return getUser;\n    }()\n  }, {\n    key: \"addToWatchlist\",\n    value: function () {\n      var _addToWatchlist = _asyncToGenerator(function* (userId, movie) {\n        var _this3 = this;\n        if (Platform.OS === 'web') {\n          var response = yield fetch(`${API_URL}/watchlist`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              userId: userId,\n              movie: movie\n            })\n          });\n          return response.json();\n        }\n        return new Promise(function (resolve, reject) {\n          _this3.db.transaction(function (tx) {\n            tx.executeSql('INSERT INTO watchlist (user_id, movie_id, title, image, description, rating) VALUES (?, ?, ?, ?, ?, ?)', [userId, movie.id, movie.title, movie.image, movie.description, movie.rating], function (_, result) {\n              return resolve(result.insertId);\n            }, function (_, error) {\n              return reject(error);\n            });\n          });\n        });\n      });\n      function addToWatchlist(_x5, _x6) {\n        return _addToWatchlist.apply(this, arguments);\n      }\n      return addToWatchlist;\n    }()\n  }, {\n    key: \"getWatchlist\",\n    value: function () {\n      var _getWatchlist = _asyncToGenerator(function* (userId) {\n        var _this4 = this;\n        if (Platform.OS === 'web') {\n          var response = yield fetch(`${API_URL}/watchlist/${userId}`);\n          return response.json();\n        }\n        return new Promise(function (resolve, reject) {\n          _this4.db.transaction(function (tx) {\n            tx.executeSql('SELECT * FROM watchlist WHERE user_id = ?', [userId], function (_, result) {\n              var movies = [];\n              for (var i = 0; i < result.rows.length; i++) {\n                movies.push(result.rows.item(i));\n              }\n              resolve(movies);\n            }, function (_, error) {\n              return reject(error);\n            });\n          });\n        });\n      });\n      function getWatchlist(_x7) {\n        return _getWatchlist.apply(this, arguments);\n      }\n      return getWatchlist;\n    }()\n  }, {\n    key: \"addUserPreference\",\n    value: function () {\n      var _addUserPreference = _asyncToGenerator(function* (userId, movie) {\n        var _this5 = this;\n        if (Platform.OS === 'web') {\n          var response = yield fetch(`${API_URL}/preferences`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              userId: userId,\n              movie: movie\n            })\n          });\n          return response.json();\n        }\n        return new Promise(function (resolve, reject) {\n          _this5.db.transaction(function (tx) {\n            tx.executeSql('INSERT INTO user_preferences (user_id, movie_id, title, image, description, rating) VALUES (?, ?, ?, ?, ?, ?)', [userId, movie.id, movie.title, movie.image, movie.description, movie.rating], function (_, result) {\n              return resolve(result.insertId);\n            }, function (_, error) {\n              return reject(error);\n            });\n          });\n        });\n      });\n      function addUserPreference(_x8, _x9) {\n        return _addUserPreference.apply(this, arguments);\n      }\n      return addUserPreference;\n    }()\n  }, {\n    key: \"getUserPreferences\",\n    value: function () {\n      var _getUserPreferences = _asyncToGenerator(function* (userId) {\n        var _this6 = this;\n        if (Platform.OS === 'web') {\n          var response = yield fetch(`${API_URL}/preferences/${userId}`);\n          return response.json();\n        }\n        return new Promise(function (resolve, reject) {\n          _this6.db.transaction(function (tx) {\n            tx.executeSql('SELECT * FROM user_preferences WHERE user_id = ?', [userId], function (_, result) {\n              var movies = [];\n              for (var i = 0; i < result.rows.length; i++) {\n                movies.push(result.rows.item(i));\n              }\n              resolve(movies);\n            }, function (_, error) {\n              return reject(error);\n            });\n          });\n        });\n      });\n      function getUserPreferences(_x10) {\n        return _getUserPreferences.apply(this, arguments);\n      }\n      return getUserPreferences;\n    }()\n  }]);\n}();\nexport default new DatabaseService();","map":{"version":3,"names":["API_URL","SQLite","Platform","OS","require","DatabaseService","_classCallCheck","db","openDatabase","name","location","initDatabase","_createClass","key","value","transaction","tx","executeSql","console","log","_","error","_createUser","_asyncToGenerator","email","password","_this","response","fetch","method","headers","body","JSON","stringify","json","Promise","resolve","reject","result","insertId","createUser","_x","_x2","apply","arguments","_getUser","_this2","rows","item","getUser","_x3","_x4","_addToWatchlist","userId","movie","_this3","id","title","image","description","rating","addToWatchlist","_x5","_x6","_getWatchlist","_this4","movies","i","length","push","getWatchlist","_x7","_addUserPreference","_this5","addUserPreference","_x8","_x9","_getUserPreferences","_this6","getUserPreferences","_x10"],"sources":["/home/patz/hackathon7.1/hackaton/app/services/database.js"],"sourcesContent":["import { Platform } from 'react-native';\n\n// For web, we'll use a REST API endpoint\nconst API_URL = 'http://your-api-endpoint.com/api';\n\n// For native platforms, we'll use SQLite\nconst SQLite = Platform.OS !== 'web' ? require('react-native-sqlite-storage') : null;\n\nclass DatabaseService {\n  constructor() {\n    if (Platform.OS !== 'web' && SQLite) {\n      this.db = SQLite.openDatabase({\n        name: 'streamflix.db',\n        location: 'default',\n      });\n      this.initDatabase();\n    }\n  }\n\n  initDatabase() {\n    if (Platform.OS === 'web') return;\n\n    this.db.transaction(tx => {\n      // Create users table\n      tx.executeSql(\n        'CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, email TEXT UNIQUE, password TEXT, preferences TEXT)',\n        [],\n        () => console.log('Users table created'),\n        (_, error) => console.error('Error creating users table:', error)\n      );\n\n      // Create watchlist table\n      tx.executeSql(\n        'CREATE TABLE IF NOT EXISTS watchlist (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, movie_id INTEGER, title TEXT, image TEXT, description TEXT, rating REAL, FOREIGN KEY (user_id) REFERENCES users (id))',\n        [],\n        () => console.log('Watchlist table created'),\n        (_, error) => console.error('Error creating watchlist table:', error)\n      );\n\n      // Create user preferences table\n      tx.executeSql(\n        'CREATE TABLE IF NOT EXISTS user_preferences (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, movie_id INTEGER, title TEXT, image TEXT, description TEXT, rating REAL, FOREIGN KEY (user_id) REFERENCES users (id))',\n        [],\n        () => console.log('User preferences table created'),\n        (_, error) => console.error('Error creating user preferences table:', error)\n      );\n    });\n  }\n\n  // User operations\n  async createUser(email, password) {\n    if (Platform.OS === 'web') {\n      const response = await fetch(`${API_URL}/users`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n      return response.json();\n    }\n\n    return new Promise((resolve, reject) => {\n      this.db.transaction(tx => {\n        tx.executeSql(\n          'INSERT INTO users (email, password) VALUES (?, ?)',\n          [email, password],\n          (_, result) => resolve(result.insertId),\n          (_, error) => reject(error)\n        );\n      });\n    });\n  }\n\n  async getUser(email, password) {\n    if (Platform.OS === 'web') {\n      const response = await fetch(`${API_URL}/users/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n      return response.json();\n    }\n\n    return new Promise((resolve, reject) => {\n      this.db.transaction(tx => {\n        tx.executeSql(\n          'SELECT * FROM users WHERE email = ? AND password = ?',\n          [email, password],\n          (_, result) => resolve(result.rows.item(0)),\n          (_, error) => reject(error)\n        );\n      });\n    });\n  }\n\n  // Watchlist operations\n  async addToWatchlist(userId, movie) {\n    if (Platform.OS === 'web') {\n      const response = await fetch(`${API_URL}/watchlist`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ userId, movie }),\n      });\n      return response.json();\n    }\n\n    return new Promise((resolve, reject) => {\n      this.db.transaction(tx => {\n        tx.executeSql(\n          'INSERT INTO watchlist (user_id, movie_id, title, image, description, rating) VALUES (?, ?, ?, ?, ?, ?)',\n          [userId, movie.id, movie.title, movie.image, movie.description, movie.rating],\n          (_, result) => resolve(result.insertId),\n          (_, error) => reject(error)\n        );\n      });\n    });\n  }\n\n  async getWatchlist(userId) {\n    if (Platform.OS === 'web') {\n      const response = await fetch(`${API_URL}/watchlist/${userId}`);\n      return response.json();\n    }\n\n    return new Promise((resolve, reject) => {\n      this.db.transaction(tx => {\n        tx.executeSql(\n          'SELECT * FROM watchlist WHERE user_id = ?',\n          [userId],\n          (_, result) => {\n            const movies = [];\n            for (let i = 0; i < result.rows.length; i++) {\n              movies.push(result.rows.item(i));\n            }\n            resolve(movies);\n          },\n          (_, error) => reject(error)\n        );\n      });\n    });\n  }\n\n  // User preferences operations\n  async addUserPreference(userId, movie) {\n    if (Platform.OS === 'web') {\n      const response = await fetch(`${API_URL}/preferences`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ userId, movie }),\n      });\n      return response.json();\n    }\n\n    return new Promise((resolve, reject) => {\n      this.db.transaction(tx => {\n        tx.executeSql(\n          'INSERT INTO user_preferences (user_id, movie_id, title, image, description, rating) VALUES (?, ?, ?, ?, ?, ?)',\n          [userId, movie.id, movie.title, movie.image, movie.description, movie.rating],\n          (_, result) => resolve(result.insertId),\n          (_, error) => reject(error)\n        );\n      });\n    });\n  }\n\n  async getUserPreferences(userId) {\n    if (Platform.OS === 'web') {\n      const response = await fetch(`${API_URL}/preferences/${userId}`);\n      return response.json();\n    }\n\n    return new Promise((resolve, reject) => {\n      this.db.transaction(tx => {\n        tx.executeSql(\n          'SELECT * FROM user_preferences WHERE user_id = ?',\n          [userId],\n          (_, result) => {\n            const movies = [];\n            for (let i = 0; i < result.rows.length; i++) {\n              movies.push(result.rows.item(i));\n            }\n            resolve(movies);\n          },\n          (_, error) => reject(error)\n        );\n      });\n    });\n  }\n}\n\nexport default new DatabaseService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}